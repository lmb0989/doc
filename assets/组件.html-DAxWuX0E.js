import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-DJCjgs7r.js";const t={};function l(r,i){return n(),e("div",null,i[0]||(i[0]=[a('<h2 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期"><span>组件生命周期</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">after</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="组件加载" tabindex="-1"><a class="header-anchor" href="#组件加载"><span>组件加载</span></a></h2><p>在加载组件时，系统会根据application对象中服务器的信息，针对不同的服务器加载不同的组件，从而使得不同服务器进程对外提供不同个服务。对于master服务器，主要加载的组件是master组件。Master组件主要负责根据根据servers.json文件中的配置信息和启动参数去启动其他服务器。对于其它服务器默认加载proxy、channel、sync、backendSession和server组件，特定的服务器还需要加载特定的组件，例如前端服务器会加载统计客户端连接数量的connection组件。具体组件的说明如下：</p><ul><li>master： master组件主要负责启动master服务器。</li><li>monitor： monitor组件主要负责启动各个服务器的monitor服务，该服务负责收集服务器的信息并定期向master进行消息推送，保持master与各个服务器的心跳连接。</li><li>proxy： proxy组件主要负责生成服务器rpc客户端，由于系统中存在多个服务器进程，不同服务器进程之间相互通信需要通过rpc调用（master服务器除外）。</li><li>remote： remote组件主要负责加载后端服务器的服务并生成服务器rpc服务端。</li><li>server：server组件主要负责启动所有服务器的用户请求处理服务。</li><li>connector: connector组件主要负责启动前端服务器的session服务和接收用户请求。</li><li>sync： sync组件主要负责启动数据同步模块并对外提供数据同步功能。</li><li>connection: connection组件主要负责启动用户连接信息的统计服务。</li><li>channel: channel组件主要负责启动channelService服务，该服务主要提供channel相关的功能包括创建channel，通过channel进行消息推送等。</li><li>session: session组件主要负责启动sessionService服务，该服务主要用来对前端服务器的用户session进行统一管理。</li><li>backendSession: backendSession组件主要负责启动backendSession服务，该服务主要负责维护服务器本地session并与前端服务器进行交互。</li><li>dictionary: dictionary组件主要负责生成handler的字典。</li><li>protobuf: protobuf组件主要负责解析服务端和客户端的proto buffer的定义，从而对客户端和服务端的通信内容进行压缩。</li></ul>',5)]))}const c=s(t,[["render",l]]),d=JSON.parse('{"path":"/Book/NodeJS/Pinus/%E7%BB%84%E4%BB%B6.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"组件生命周期","slug":"组件生命周期","link":"#组件生命周期","children":[]},{"level":2,"title":"组件加载","slug":"组件加载","link":"#组件加载","children":[]}],"git":{"createdTime":1733216180000,"updatedTime":1733216180000,"contributors":[{"name":"lmb0989","email":"1150274785@qq.com","commits":1}]},"readingTime":{"minutes":4.09,"words":614},"filePathRelative":"Book/NodeJS/Pinus/组件.md","localizedDate":"2024年12月3日","excerpt":"<h2>组件生命周期</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"javascript\\" data-title=\\"javascript\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">start</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">after</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> start</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">stop</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{c as comp,d as data};
