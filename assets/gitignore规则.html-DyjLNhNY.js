import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as l,o as e}from"./app-DJCjgs7r.js";const a={};function n(o,i){return e(),t("div",null,i[0]||(i[0]=[l(`<h3 id="匹配规则" tabindex="-1"><a class="header-anchor" href="#匹配规则"><span>匹配规则</span></a></h3><ul><li><code>空格</code>不匹配任意文件，可作为分隔符，可用反斜杠转义</li><li><code># 开头</code>的模式标识注释，可以使用反斜杠进行转义</li><li><code>! 开头</code>的模式标识否定，该文件将会再次被包含，<strong>如果排除了该文件的父级目录，则使用 ! 也不会再次被包含</strong>。可以使用反斜杠进行转义</li><li><code>/ 结束</code>的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li><li><code>/ 开始</code>的模式匹配项目跟目录</li><li>如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</li><li><code>**</code>匹配多级目录，可在开始，中间，结束</li><li><code>?</code>通用匹配单个字符</li><li><code>[]</code>通用匹配单个字符列表</li></ul><h3 id="常用匹配示例" tabindex="-1"><a class="header-anchor" href="#常用匹配示例"><span>常用匹配示例</span></a></h3><ul><li>bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</li><li>/bin: 忽略根目录下的bin文件</li><li>/*.c: 忽略 cat.c，不忽略 build/cat.c</li><li>debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj</li><li>**/foo: 忽略/foo, a/foo, a/b/foo等</li><li>a/**/b: 忽略a/b, a/x/b, a/x/y/b等</li><li>!/bin/run.sh: 不忽略 bin 目录下的 <a href="http://run.sh" target="_blank" rel="noopener noreferrer">run.sh</a> 文件</li><li>*.log: 忽略所有 .log 文件</li><li>config.php: 忽略当前路径的 config.php 文件</li><li><strong>/fd1/</strong>*:说明：忽略根目录下的 /fd1/ 目录的全部内容；</li></ul><p>在项目目录下建立&quot;.gitignore&quot;文件，此文件有如下规则</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 匹配示例</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 						    #注释</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logs/</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						# 忽略当前路径下的logs目录，包含logs下的所有子目录和文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/logs.txt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					# 忽略根目录下的logs.txt文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*.class						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 忽略所有后缀为.class的文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">!</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/classes/a.class</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			 # 不忽略classes目录下的a.class文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmp/*.txt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					# 只忽略tmp目录下的.txt文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">**/foo						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可以忽略/foo, a/foo, a/b/foo等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>各语言忽略文件参考</p><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener noreferrer">https://github.com/github/gitignore</a></p></blockquote>`,7)]))}const d=s(a,[["render",n]]),r=JSON.parse('{"path":"/Book/Git/gitignore%E8%A7%84%E5%88%99.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"匹配规则","slug":"匹配规则","link":"#匹配规则","children":[]},{"level":3,"title":"常用匹配示例","slug":"常用匹配示例","link":"#常用匹配示例","children":[]}],"git":{"createdTime":1744362091000,"updatedTime":1744362091000,"contributors":[{"name":"lmb0989","email":"1150274785@qq.com","commits":1}]},"readingTime":{"minutes":3.2,"words":480},"filePathRelative":"Book/Git/gitignore规则.md","localizedDate":"2025年4月11日","excerpt":"<h3>匹配规则</h3>\\n<ul>\\n<li><code>空格</code>不匹配任意文件，可作为分隔符，可用反斜杠转义</li>\\n<li><code># 开头</code>的模式标识注释，可以使用反斜杠进行转义</li>\\n<li><code>! 开头</code>的模式标识否定，该文件将会再次被包含，<strong>如果排除了该文件的父级目录，则使用 ! 也不会再次被包含</strong>。可以使用反斜杠进行转义</li>\\n<li><code>/ 结束</code>的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li>\\n<li><code>/ 开始</code>的模式匹配项目跟目录</li>\\n<li>如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</li>\\n<li><code>**</code>匹配多级目录，可在开始，中间，结束</li>\\n<li><code>?</code>通用匹配单个字符</li>\\n<li><code>[]</code>通用匹配单个字符列表</li>\\n</ul>"}');export{d as comp,r as data};
