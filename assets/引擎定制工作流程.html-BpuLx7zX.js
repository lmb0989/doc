import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-DJCjgs7r.js";const n="/assets/bin.BSKQ0G9B-BSKQ0G9B.png",l="/assets/sign.DuueHHsW-DuueHHsW.png",r={};function h(p,i){return t(),a("div",null,i[0]||(i[0]=[e(`<p>Cocos Creator 的引擎部分包括 JavaScript、Cocos2d-x 和 adapter 三个部分。全部都在 GitHub 上开源。地址在：</p><ul><li><strong>JavaScript 引擎</strong>：<a href="https://github.com/lmb0989/cocos-engine" target="_blank" rel="noopener noreferrer">GitHub</a></li><li><strong>Cocos2d-x 引擎</strong>：<a href="https://github.com/lmb0989/engine-native" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul><p>Adapter 地址分别在：</p><ul><li><code>jsb-adapter</code>：<a href="https://github.com/lmb0989/jsb-adapter" target="_blank" rel="noopener noreferrer">GitHub</a></li><li><code>Mini-game-adapters</code>：<a href="https://github.com/lmb0989/adapters" target="_blank" rel="noopener noreferrer">GitHub</a></li><li><code>runtime-adapters</code>：<a href="https://github.com/lmb0989/runtime-adapters" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul><p>建议通过 GitHub 的 fork 工作流程来维护自己定制的代码，以便在将来引擎升级时，可以方便地将定制的部分更新上去，具体操作方式请阅读 <a href="https://help.github.com/articles/fork-a-repo" target="_blank" rel="noopener noreferrer">Fork a repo</a>。如果你愿意帮助 Cocos 越做越好，欢迎在 GitHub 提交你的修改，请参考 <a href="https://docs.cocos.com/creator/2.4/manual/zh/submit-pr/submit-pr.html" target="_blank" rel="noopener noreferrer">如何向 Cocos 提交代码</a>。关于更多 GitHub 相关工作流程请参考 <a href="https://help.github.com/" target="_blank" rel="noopener noreferrer">GitHub Help</a>。</p><p>另外，根据不同的 Creator 版本，还需要切换不同的引擎分支，例如：</p><ul><li><strong>master/develop</strong> 分支：当前最新版本所用分支</li><li><strong>vX.Y-release</strong> 分支：对应 X.Y 版本所用分支</li><li><strong>vX.Y</strong> 分支：和 vX.Y-release 分支相同，主要用于版本发布之前的研发工作</li><li><strong>next</strong> 分支：大型重构所用分支</li></ul><p>通常建议使用和所用 Creator 相同版本的 vX.Y-release 分支，如果找不到的话，则使用 master 分支。</p><h2 id="定制-javascript-引擎" tabindex="-1"><a class="header-anchor" href="#定制-javascript-引擎"><span>定制 JavaScript 引擎</span></a></h2><p>如果您只需要定制 Web 版游戏的引擎功能，或只需要修改纯 JavaScript 层逻辑（如 UI 系统，动画系统），那么您只要按照下面的流程修改 JS 引擎就可以了</p><ol><li><h5 id="首先您需要从-github-上-fork-或者克隆-javascript-引擎的原始版本-地址见上文" tabindex="-1"><a class="header-anchor" href="#首先您需要从-github-上-fork-或者克隆-javascript-引擎的原始版本-地址见上文"><span>首先您需要从 GitHub 上 fork 或者克隆 JavaScript 引擎的原始版本（地址见上文</span></a></h5><p>JavaScript 引擎在使用前请根据 Creator 版本切换相对应的分支。</p></li><li><h5 id="修改-js-引擎路径" tabindex="-1"><a class="header-anchor" href="#修改-js-引擎路径"><span>修改 JS 引擎路径</span></a></h5><p>通过 <strong>项目 -&gt; 项目设置</strong> 面板的 <strong>自定义引擎</strong> 选项卡，设置需要定制的 JavaScript 引擎路径。</p></li><li><h5 id="安装编译依赖" tabindex="-1"><a class="header-anchor" href="#安装编译依赖"><span>安装编译依赖</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># node使用11.15.0版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> E:/engine</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				# 在命令行中进入引擎路径</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gulp</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# 安装 gulp 构建工具</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					# 安装依赖的模块</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="进行修改然后编译" tabindex="-1"><a class="header-anchor" href="#进行修改然后编译"><span>进行修改然后编译</span></a></h5><p>接下来您可以定制引擎修改了，修改之后请在命令行中继续执行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gulp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令会在引擎目录下生成一个 <code>bin</code> 文件夹，并将引擎源码编译到 <code>bin</code> 目录下。</p><figure><img src="`+n+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>注意</strong>：如果在编译过程中出现 <code>JavaScript heap out of memory</code> 的报错，可执行以下命令解决：</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gulp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-dev</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --max-old-space-size=8192</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="定制-cocos2d-x-引擎" tabindex="-1"><a class="header-anchor" href="#定制-cocos2d-x-引擎"><span>定制 Cocos2d-x 引擎</span></a></h2><p>如果您需要定制和原生平台相关的引擎功能，在修改 JS 引擎的基础上，可能还需要同步修改 Cocos2d-x 引擎。</p><ol><li><h5 id="获取-cocos2d-x-引擎" tabindex="-1"><a class="header-anchor" href="#获取-cocos2d-x-引擎"><span>获取 Cocos2d-x 引擎</span></a></h5><p>从上文中指定的 GitHub 仓库下载或者克隆。和 JS 引擎类似，Cocos2d-x 引擎在使用前也请确认当前所在分支</p></li><li><h5 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h5><p>下载或者克隆好 Cocos2d-x 引擎仓库后，在命令行进入引擎路径然后执行以下命令。</p><blockquote><p><strong>注意</strong>：如果是从编辑器拷贝出来的内置 <strong>cocos2d-x</strong> 目录，可以跳过该步骤。</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># node使用11.15.0版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> E:/cocos2d-x</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  				# 在命令行进入 Cocos2d-x 引擎路径</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						# 安装编译依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gulp</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				# 安装 gulp 构建工具</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gulp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						# 初始化仓库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果遇到类似下方这样的报错，请手动下载该 zip 文件。出错原因是您的 python 自带的一个库版本太低，但是不太好升级，比较简单一些的方法是下载该 zip 文件，手动放到 Cocos2d-x 引擎仓库下并重命名为 <code>v3-deps-54.zip</code>（不需要解压该 zip 文件），再重新运行 <code>gulp init</code>。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ==&gt; Ready to download </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;v3-deps-54.zip&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> from</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/cocos/cocos-engine-external/archive/v3-deps-54.zip&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; Traceback (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">most</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> recent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> call</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> last</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; URLError: &lt;urlopen error [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_ssl.c:590</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>若遇到类似下方这样的报错，请手动下载该 zip 文件。手动放到 Cocos2d-x 引擎仓库 <code>tools/cocos2d-console</code> 目录下并重命名为 <code>creator-console-2.zip</code>（不需要解压该 zip 文件），再重新运行 <code>gulp init</code>。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ==&gt; Ready to download </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;creator-console-2.zip&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> from</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://github.com/cocos2d/console-binary/archive/creator-console-2.zip&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; Traceback (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">most</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> recent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> call</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> last</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; URLError: &lt;urlopen error [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_ssl.c:590</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>若遇到类似下方这样的报错，通常是因为该 Cocos2d-x 引擎仓库是直接从 GitHub 下载而不是克隆下来的。可以执行 <code>git init</code>，然后再重新运行 <code>gulp init</code> 即可。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fatal:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (or </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">any</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> parent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): .git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><h5 id="修改引擎" tabindex="-1"><a class="header-anchor" href="#修改引擎"><span>修改引擎</span></a></h5><p>接下来可以对 Cocos2d-x 引擎进行定制修改了，由于只有在 <strong>构建发布</strong> 过程中才会编译代码，所以修改引擎后可以直接打开 <strong>构建发布</strong> 面板，选择 <code>default</code> 或者 <code>link</code> 模板进行构建和编译。</p></li><li><h5 id="编译模拟器" tabindex="-1"><a class="header-anchor" href="#编译模拟器"><span>编译模拟器</span></a></h5><p>要在模拟器中预览您的引擎修改，需要执行以下命令来重新编译模拟器</p><p>bash</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># node使用11.15.0版本</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过 cocos console 生成模拟器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gulp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gen-simulator</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gulp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update-simulator-config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：如果需要在 Mac 上通过 Safari 来调试模拟器中的 JavaScript 代码，则需要在生成自定义模拟器之前先在 Xcode 中随便设置一个签名。详见 <a href="https://github.com/cocos/engine-native/blob/develop/README.md#git-user-attention" target="_blank" rel="noopener noreferrer">Build simulator</a>。</p></blockquote><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ol><h2 id="定制jsb-adapter" tabindex="-1"><a class="header-anchor" href="#定制jsb-adapter"><span>定制jsb-adapter</span></a></h2><p><strong>jsb-adapter</strong>的代码位于<code>resources/builtin</code> 目录下的 <code>jsb-adapter</code></p><p>在 <code>jsb-adapter</code> 目录下，主要包括以下两个目录结构：</p><ul><li><code>builtin</code>：适配原生平台的 runtime</li><li><code>engine</code>：适配引擎层面的一些 api</li></ul><p><code>builtin</code> 部分除了适配 BOM 和 DOM 运行环境，还包括了一些相关的 jsb 接口，如 openGL、audioEngine 等。</p><blockquote><p>在 v2.0.7 之后，jsb-adapter 废弃了繁琐的手动编译的操作。可以直接修改 <strong>builtin</strong> 和 <strong>engine</strong> 目录下的源码。修改完成后打开编辑器，编辑器会在启动时自动编译这部分源码。</p></blockquote><h2 id="定制mini-game-adapters" tabindex="-1"><a class="header-anchor" href="#定制mini-game-adapters"><span>定制Mini-game-adapters</span></a></h2><p><strong>小游戏</strong> 的适配层代码位于 <code>resources/builtin</code> 目录下的 <code>adapters</code>。</p><ul><li>这部分代码的定制，不需要任何编译操作。</li><li>引擎层面的适配工作，请在相应的 engine 目录下完成。</li></ul><h2 id="定制runtime-adapters" tabindex="-1"><a class="header-anchor" href="#定制runtime-adapters"><span>定制runtime-adapters</span></a></h2><p><strong>runtime-adapters</strong>的代码位于<code>resources/builtin</code> 目录下的 <code>runtime-adapters</code></p><p>修改完成后，重新打开creator即可</p>',26)]))}const k=s(r,[["render",h]]),c=JSON.parse('{"path":"/Book/%E6%B8%B8%E6%88%8F/CocosCreator/%E5%AE%9A%E5%88%B6%E5%BC%95%E6%93%8E/2.4.x%E7%89%88%E6%9C%AC/%E5%BC%95%E6%93%8E%E5%AE%9A%E5%88%B6%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"定制 JavaScript 引擎","slug":"定制-javascript-引擎","link":"#定制-javascript-引擎","children":[]},{"level":2,"title":"定制 Cocos2d-x 引擎","slug":"定制-cocos2d-x-引擎","link":"#定制-cocos2d-x-引擎","children":[]},{"level":2,"title":"定制jsb-adapter","slug":"定制jsb-adapter","link":"#定制jsb-adapter","children":[]},{"level":2,"title":"定制Mini-game-adapters","slug":"定制mini-game-adapters","link":"#定制mini-game-adapters","children":[]},{"level":2,"title":"定制runtime-adapters","slug":"定制runtime-adapters","link":"#定制runtime-adapters","children":[]}],"git":{"createdTime":1742374014000,"updatedTime":1742467220000,"contributors":[{"name":"lmb0989","email":"1150274785@qq.com","commits":2}]},"readingTime":{"minutes":10.25,"words":1537},"filePathRelative":"Book/游戏/CocosCreator/定制引擎/2.4.x版本/引擎定制工作流程.md","localizedDate":"2025年3月19日","excerpt":"<p>Cocos Creator 的引擎部分包括 JavaScript、Cocos2d-x 和 adapter 三个部分。全部都在 GitHub 上开源。地址在：</p>\\n<ul>\\n<li><strong>JavaScript 引擎</strong>：<a href=\\"https://github.com/lmb0989/cocos-engine\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub</a></li>\\n<li><strong>Cocos2d-x 引擎</strong>：<a href=\\"https://github.com/lmb0989/engine-native\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub</a></li>\\n</ul>"}');export{k as comp,c as data};
