import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-DJCjgs7r.js";const t={};function l(r,s){return a(),e("div",null,s[0]||(s[0]=[n(`<p>使用pinus框架的话，有pinus自己的术语，这里先对术语做一些简单的解释，给读者一个直观的概念，不至于看到相应术语时产生迷惑。</p><h1 id="常见术语" tabindex="-1"><a class="header-anchor" href="#常见术语"><span>常见术语</span></a></h1><h3 id="gate服务器" tabindex="-1"><a class="header-anchor" href="#gate服务器"><span>gate服务器</span></a></h3><p>一个应用的gate服务器，一般不参与rpc调用，也就是说其配置项里可以没有port字段，仅仅有clientPort字段，它的作用是做前端的负载均衡。客户端往往首先向gate服务器发出请求，gate会给客户端分配具体的connector服务器。具体的分配策略一般是根据客户端的某一个key做hash得到connector的id，这样就可以实现各个connector服务器的负载均衡。</p><h3 id="connector服务器" tabindex="-1"><a class="header-anchor" href="#connector服务器"><span>connector服务器</span></a></h3><p>connector服务器接收客户端的连接请求，创建与客户端的连接，维护客户端的session信息。同时，接收客户端对后端服务器的请求，按照用户配置的路由策略，将请求路由给具体的后端服务器。当后端服务器处理完请求或者需要给客户端推送消息的时候，connector服务器同样会扮演一个中间角色，完成对客户端的消息发送。connector服务器会同时拥有clientPort和port，其中clientPort用来监听客户端的连接，port端口用来给后端提供服务。</p><h3 id="应用逻辑服务器" tabindex="-1"><a class="header-anchor" href="#应用逻辑服务器"><span>应用逻辑服务器</span></a></h3><p>gate服务器和connector服务器又都被称作前端服务器，应用逻辑服务器是后端服务器，它完成实际的应用逻辑，提供服务给客户端，当然客户端的请求是通过前端服务器路由过来的。后端服务器之间也会通过rpc调用而有相互之间的交互。由于后端服务器不会跟客户端直接有连接，因此后端服务器只需监听它提供服务的端口即可。</p><h3 id="master服务器" tabindex="-1"><a class="header-anchor" href="#master服务器"><span>master服务器</span></a></h3><p>master服务器加载配置文件，通过读取配置文件，启动所配置的服务器集群，并对所有服务器进行管理。</p><h3 id="rpc调用" tabindex="-1"><a class="header-anchor" href="#rpc调用"><span>rpc调用</span></a></h3><p>pinus中使用rpc调用进行进程间通信，在pinus中rpc调用分为两大类，使用namespace进行区分，namespace为sys的为系统rpc调用，它对用户来说是透明的，目前pinus中系统rpc调用有：</p><ul><li>后端服务器向前端服务器请求session信息</li><li>后端服务器通过channel推送消息时对前端服务器发起的rpc调用</li><li>前端服务器将用户请求路由给后端服务器时也是sys rpc调用</li></ul><p>除了系统rpc调用外，其余的由用户自定义的rpc调用属于user namespace的rpc调用，需要用户自己完成rpc服务端remote的handle代码，并由rpc客户端显式地发起调用</p><h3 id="route-router" tabindex="-1"><a class="header-anchor" href="#route-router"><span>route,router</span></a></h3><p>route用来标识一个具体服务或者客户端接受服务端推送消息的位置，对服务端来说，其形式一般是&lt; ServerType &gt;、&lt; HandlerName &gt;、&lt; MethodName &gt;，例如&quot;chat.chatHandler.send&quot;, chat就是服务器类型，chatHandler是chat服务器中定义的一个Handler，send则为这个Handler中的一个handle方法。对客户端来说，其路由一般形式为onXXX，当服务端推送消息时，客户端会有相应的回调。<br> 一般来说具体的同类型应用服务器都会有多个，当客户端请求到达后，前端服务器会将用户客户端请求派发到后端服务器，这种派发需要一个路由函数router，可以粗略地认为router就是根据用户的session以及其请求内容，做一些运算后，将其映射到一个具体的应用服务器id。可以通过application的route调用给某一类型的服务器配置其router。如果不配置的话，pinus框架会使用一个默认的router。pinus默认的路由函数是使用session里面的uid字段，计算uid字段的crc32校验码，然后用这个校验码作为key，跟同类应用服务器数目取余，得到要路由到的服务器编号。注意这里有一个陷阱，就是如果session没有绑定uid的话，此时uid字段为undefined，可能会造成所有的请求都路由到同一台服务器。所以在实际开发中还是需要自己来配置router。</p><h3 id="session-frontendsession-backendsession-sessionservice-backendsessionservice" tabindex="-1"><a class="header-anchor" href="#session-frontendsession-backendsession-sessionservice-backendsessionservice"><span>Session, FrontendSession, BackendSession， SessionService， BackendSessionService</span></a></h3><p>在pinus框架中，有这三个session的概念，同时又有两个service： <code>SessionService</code>和<code>BackendSessionService</code>，也是最令人迷惑的地方，这里尝试给出一些说明，让你的理解更清晰一些：<br> Session指的是一个客户端连接的抽象，它的大致字段如下：</p><div class="language-javasript line-numbers-mode" data-highlighter="shiki" data-ext="javasript" data-title="javasript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    id : &lt;session id&gt; // readonly</span></span>
<span class="line"><span>    frontendId : &lt;frontend server id&gt; // readonly</span></span>
<span class="line"><span>    uid : &lt;bound uid&gt; // readonly</span></span>
<span class="line"><span>    settings : &lt;key-value map&gt; // read and write  </span></span>
<span class="line"><span>    __socket__ : &lt;raw_socket&gt;</span></span>
<span class="line"><span>    __state__ : &lt;session state&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>id是这个session的id，是全局唯一的，一般使用自增的方式来生成;</li><li>frontendId是维护这个session的前端服务器的id；</li><li>uid是这个session所绑定的用户id;</li><li>__socket__是底层原生socket的引用;</li><li>__state__用来指明当前session的生命周期状态。</li><li>settings维护一个key-value map，用来描述session的一些自定义属性，比如聊天应用中的房间号就可以看作是session的一个自定义属性。</li></ul><p>从上面的分析看，一个session一旦建立，那么id， frontendId，__socket__, __state__, uid都是确定的，都应该是只可读不可写的。而settings也不应该被随意的修改。<br> 因此，在前端服务器中，引入了FrontendSession, 可以把它看作是一个内部session在前端服务器中的傀儡，FrontendSession的字段大致如下:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">session</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; // readonly</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    frontendId : &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">frontend</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> server</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; // readonly</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    uid : &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bound</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> uid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; // readonly</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    settings : &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">key-value</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; // read and write  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其作用：</p><ul><li>通过FrontendSession可以对settings字段进行设置值，然后通过调用FrontendSession的push方法，将设置的settings的值同步到原始session中;</li><li>通过FrontendSession的bind调用，还可以给session绑定uid;</li><li>当然也可以通过FrontendSession访问session的只读字段，不过对FrontendSession中与session中相同的只读字段的修改并不会反映到原始的session中。</li></ul><p>SessionService维护所有的原始的session信息,包括不可访问的字段，绑定的uid以及用户自定义的字段。</p><p>下面再说BackendSession，与FrontendSession类似，BackendSession是用于后端服务器的，可以看作是原始session的代理，其数据字段跟FrontendSession基本一致。</p><p>BackendSession是由BackendSessionService创建并维护的，在后端服务器接收到请求后，由BackendSessionService根据前端服务器rpc的参数，进行创建。对BackendSessionService的每一次方法调用实际上都会生成一个远程调用，比如通过一个sid获取其BackendSession。同样，对于BackendSession中字段的修改也不会反映到原始的session中，不过与FrontendSession一样，BackendSession也有push，bind，unbind调用，它们的作用与FrontendSession的一样，都是用来修改原始session中的settings字段或者绑定/解绑uid的，不同的是BackendSession的这些调用实际上都是名字空间为sys的远程调用。</p><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h3><p>channel可以看作是一个玩家id的容器，主要用于需要广播推送消息的场景。可以把某个玩家加入到一个Channel中，当对这个Channel推送消息的时候，所有加入到这个Channel的玩家都会收到推送过来的消息。一个玩家的id可能会被加入到多个Channel中，这样玩家就会收到其加入的Channel推送过来的消息。需要注意的是Channel都是服务器本地的，应用服务器A和B并不会共享Channel，也就是说在服务器A上创建的Channel，只能由服务器A才能给它推送消息。</p><h3 id="request-response-notify-push" tabindex="-1"><a class="header-anchor" href="#request-response-notify-push"><span>request, response, notify, push</span></a></h3><p>pinus中有四种消息类型的消息，分别是request，response，notify和push，客户端发起request到服务器端，服务器端处理后会给其返回响应response;notify是客户端发给服务端的通知，也就是不需要服务端给予回复的请求;push是服务端主动给客户端推送消息的类型。在后面的叙述中，将会使用这些术语而不再作解释。</p><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h3><p>filter分为before和after两类，每类filter都可以注册多个，形成一个filter链，所有的客户端请求都会经过filter链进行一些处理。before filter会对请求做一些前置处理，如：检查当前玩家是否已登录，打印统计日志等。after filter是进行请求后置处理的地方，如：释放请求上下文的资源，记录请求总耗时等。after filter中不应该再出现修改响应内容的代码，因为在进入after filter前响应就已经被发送给客户端。</p><h3 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>handler</span></a></h3><p>handler是实现具体业务逻辑的地方，在请求处理流程中，它位于before filter和after filter之间，handler的接口声明如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">methodName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数含义与before filter类似。handler处理完毕后，如有需要返回给客户端的响应，可以将返回结果封装成js对象，通过next传递给后面流程。</p><h3 id="error-handler" tabindex="-1"><a class="header-anchor" href="#error-handler"><span>error handler</span></a></h3><p>error handler是一个处理全局异常的地方，可以在error handler中对处理流程中发生的异常进行集中处理，如：统计错误信息，组织异常响应结果等。error handler函数是可选的，如果需要可以通过</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;errorHandler&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">handleFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>来向pinus框架进行注册，函数声明如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">errorHandler</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，err是前面流程中发生的异常；resp是前面流程传递过来，需要返回给客户端的响应信息。其他参数与前面的handler一样。</p><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span>component</span></a></h3><p>pinus 框架是由一些松散耦合的component组成的，每个component完成一些功能。整个pinus框架可以看作是一个component容器，完成component的加载以及生命周期管理。pinus的核心功能都是由component完成的，每个component往往有start，afterStart，stop等调用，用来完成生命周期管理。</p><h3 id="admin-client-monitor-master" tabindex="-1"><a class="header-anchor" href="#admin-client-monitor-master"><span>admin client, monitor, master</span></a></h3><p>在对pinus服务器进行管理的时候，有三个概念admin client， monitor， master。</p><ul><li><p>monitor运行在各个应用服务器中，它会向master注册自己，向master上报其服务器的信息，当服务器群有变化时，接收master推送来的变化消息，更新其服务器上下文。</p></li><li><p>master运行在应用服务器中，它会收集整个服务器群的信息，有变化时会将变化推送到各个monitor；同时，master还接受admin client的请求，按照client发出的命令，执行对应的操作，如查询整个服务器群的状态，增加一个服务器等。</p></li><li><p>client独立运行自己的进程，它会发起到master的连接，然后通过对master发出请求或者命令，来管理整个服务器群。目前工具<a href="https://github.com/node-pinus/pinus-cli" target="_blank" rel="noopener noreferrer">pomleo-cli</a>就是这样的一个客户端。</p></li></ul><h3 id="admin-module" tabindex="-1"><a class="header-anchor" href="#admin-module"><span>admin module</span></a></h3><p>在pinus中，module特指服务器监控管理模块，与component类似，不过在module中实现的是监控逻辑，比如收集进程状态等。用户在使用时，可以通过<code>application</code>的<code>registerAdmin</code>注册管理模块，实现用户自己定制的监控管理功能。每一个module中都会定义下面四种回调函数，不过都是可选的：</p><ul><li>masterHandler(agent, msg, cb) 当有应用服务器给master发监控数据时，这个回调函数会由master进程进行回调，完成应用服务器的消息处理;</li><li>monitorHandler(agent, msg, cb) 当有master请求应用服务器的一些监控信息时，由应用服务器进行回调，完成对master请求的处理;</li><li>clientHandler(agent, msg, cb）当由管理客户端向master请求服务器群信息时，由master进程进行回调处理客户端的请求。</li><li>start(cb) 当admin module，注册加载完成后，这个回调会被执行，在这里可以做一些初始化工作。</li></ul><h3 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin"><span>plugin</span></a></h3><p>plugin是pinus 0.6加入的全新的扩展机制，一个plugin由多个component以及一些事件响应处理器组成。它提供了一种很灵活的机制来扩展pinus。不仅可以提供component的功能，还可以对整个框架的全局事件作出响应处理。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>上面简要地介绍了pinus中的一些术语，因为在下面的例子中，会涉及到这些术语，不至于当出现这些术语时一头雾水。下面我们就正式进入我们的例子，<a href="chat%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85" title="chat源码下载与安装">获取源码并安装我们的例子应用</a>。</p>`,55)]))}const p=i(t,[["render",l]]),o=JSON.parse('{"path":"/Book/NodeJS/Pinus/%E6%9C%AF%E8%AF%AD%E8%A7%A3%E9%87%8A.html","title":"常见术语","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"gate服务器","slug":"gate服务器","link":"#gate服务器","children":[]},{"level":3,"title":"connector服务器","slug":"connector服务器","link":"#connector服务器","children":[]},{"level":3,"title":"应用逻辑服务器","slug":"应用逻辑服务器","link":"#应用逻辑服务器","children":[]},{"level":3,"title":"master服务器","slug":"master服务器","link":"#master服务器","children":[]},{"level":3,"title":"rpc调用","slug":"rpc调用","link":"#rpc调用","children":[]},{"level":3,"title":"route,router","slug":"route-router","link":"#route-router","children":[]},{"level":3,"title":"Session, FrontendSession, BackendSession， SessionService， BackendSessionService","slug":"session-frontendsession-backendsession-sessionservice-backendsessionservice","link":"#session-frontendsession-backendsession-sessionservice-backendsessionservice","children":[]},{"level":3,"title":"Channel","slug":"channel","link":"#channel","children":[]},{"level":3,"title":"request, response, notify, push","slug":"request-response-notify-push","link":"#request-response-notify-push","children":[]},{"level":3,"title":"filter","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"handler","slug":"handler","link":"#handler","children":[]},{"level":3,"title":"error handler","slug":"error-handler","link":"#error-handler","children":[]},{"level":3,"title":"component","slug":"component","link":"#component","children":[]},{"level":3,"title":"admin client, monitor, master","slug":"admin-client-monitor-master","link":"#admin-client-monitor-master","children":[]},{"level":3,"title":"admin module","slug":"admin-module","link":"#admin-module","children":[]},{"level":3,"title":"plugin","slug":"plugin","link":"#plugin","children":[]}],"git":{"createdTime":1733216180000,"updatedTime":1733216180000,"contributors":[{"name":"lmb0989","email":"1150274785@qq.com","commits":1}]},"readingTime":{"minutes":21.82,"words":3273},"filePathRelative":"Book/NodeJS/Pinus/术语解释.md","localizedDate":"2024年12月3日","excerpt":"<p>使用pinus框架的话，有pinus自己的术语，这里先对术语做一些简单的解释，给读者一个直观的概念，不至于看到相应术语时产生迷惑。</p>\\n<h1>常见术语</h1>\\n<h3>gate服务器</h3>\\n<p>一个应用的gate服务器，一般不参与rpc调用，也就是说其配置项里可以没有port字段，仅仅有clientPort字段，它的作用是做前端的负载均衡。客户端往往首先向gate服务器发出请求，gate会给客户端分配具体的connector服务器。具体的分配策略一般是根据客户端的某一个key做hash得到connector的id，这样就可以实现各个connector服务器的负载均衡。</p>"}');export{p as comp,o as data};
