import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as r}from"./app-DJCjgs7r.js";const n="/assets/bfc0d546-9666-11e2-8092-9a4f15766c21-BoCuDHvk.png",d="/assets/f19cfd00-9667-11e2-8e93-9f490d181eab-Dun2EHfL.png",c="/assets/748e320c-966c-11e2-848e-fbbe6e04532d-C9RpRTa0.png",i="/assets/b3366cf4-966c-11e2-892f-f19f558a6243-udewz7yZ.png",s="/assets/1197fcfe-966d-11e2-9a3b-e6bf86d1f029-DZSCTbQP.png",l="/assets/b7fa3a74-966f-11e2-9a26-666f9f011d4e-BGNe71wC.png",p="/assets/2d03b5e6-9672-11e2-929e-df99fc90104c-CtN5mnqX.png",g="/assets/2c299dd6-9675-11e2-9861-b5096dcee5d2-DqRKPTF_.png",h="/assets/b6d2c916-9671-11e2-93fe-99634c124810-ffjZ6NRN.png",f="/assets/c8ecac3a-9675-11e2-8338-1ac33ea60736-BLlN9dKt.png",u="/assets/b829e8a8-9676-11e2-9879-d33996890224-DyjWgwoB.png",b={};function m(_,e){return r(),a("div",null,e[0]||(e[0]=[t('<p>使用得心应手的IDE来开发应用程序，可以使我们的工作事半功倍。而调试则更可以让我们准确的定位BUG，发现问题。<br><br> 本文讲述如何使用 <a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener noreferrer">WebStorm</a> 这个怪兽级JavaScript IDE来调试 <a href="https://github.com/node-pinus/chatofpinus" target="_blank" rel="noopener noreferrer">Chat of Pinus</a>。<br><br> 如果你更喜欢 <a href="http://www.eclipse.org/" target="_blank" rel="noopener noreferrer">Eclipse</a> 等其他IDE，希望本文也可以有一些帮助。</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><ul><li><p>首先我们需要知道，NodeJS应用程序可以在运行命令中加入<code>--debug=5858</code>参数，可以使得NodeJS程序监听本地<code>5858</code>端口，并开启调试模式。</p></li><li><p>其次，Pinus的运行原理是：<code>pinus start</code>时，启动了<code>master</code>服务器，然后其先读取配置文件，再启动由<code>game-server/config/servers.json</code>文件中经过配置的各个服务器进程。其中，你看到的<code>id</code>、<code>host</code>、<code>port</code>等等都是子服务器的启动参数，这些参数都会放到启动命令行中<code>app.js</code>的后面。</p></li><li><p>再次，Pinus的设计人员最初已经考虑到了直接在<code>node</code>后<code>app.js</code>前添加参数的简便方法：在服务器配置文件中，配置条目中插入<code>&quot;args&quot;: &quot; 你想要的参数 &quot;</code>后，便可以你指定的参数运行<code>node</code>。</p></li></ul><h2 id="修改配置以启动带有调试模式的服务器" tabindex="-1"><a class="header-anchor" href="#修改配置以启动带有调试模式的服务器"><span>修改配置以启动带有调试模式的服务器</span></a></h2><h3 id="一、打开文件" tabindex="-1"><a class="header-anchor" href="#一、打开文件"><span>一、打开文件</span></a></h3><p>打开<code>game-server/config/servers.json</code>。为了便于便于开发，我们将服务器数目缩减至每功能1个运行实例。这样你就会看到：</p><figure><img src="'+n+'" alt="精简过的默认服务器配置" tabindex="0" loading="lazy"><figcaption>精简过的默认服务器配置</figcaption></figure><h3 id="二、修改并保存" tabindex="-1"><a class="header-anchor" href="#二、修改并保存"><span>二、修改并保存</span></a></h3><p>我们对<code>gate</code>服务器的负载分配原理产生了兴趣，想要调试它。这时，我们只需要在<code>{&quot;id&quot;: &quot;gate-server-1&quot;, ...</code>的行末，花括号<code>}</code>前，插入下面代码<code>, &quot;args&quot;: &quot; --debug=32312 &quot;</code>。使<code>gate</code>服务器的配置组变成这样：</p><figure><img src="'+d+'" alt="gate服务器调试配置" tabindex="0" loading="lazy"><figcaption>gate服务器调试配置</figcaption></figure><p>当再次启动服务器时，<code>master</code>服务器会读取新的配置，并以这个配置运行<code>gate-server-1</code>服务器。</p><p>而该服务器的进程，会监听<code>32312</code>端口，以便调试器连接。将端口设置的偏高是为了减少端口冲突的可能性。开发过程中，如果启动后发现有报<code>ADDRINUSE</code>（端口已被占用）的错误，请使用<code>pinus kill --force</code>杀光Pinus程序，并调整此处的端口值。</p><h2 id="配置ide的调试器" tabindex="-1"><a class="header-anchor" href="#配置ide的调试器"><span>配置IDE的调试器</span></a></h2><h3 id="一、打开edit-configurations-对话框" tabindex="-1"><a class="header-anchor" href="#一、打开edit-configurations-对话框"><span>一、打开<code>Edit Configurations...</code>对话框</span></a></h3><p>可以从运行、调试按钮前面的小三角进入，或者从工具栏中选择<code>Run</code> - <code>Edit Configurations...</code>。</p><figure><img src="'+c+'" alt="打开Edit Configurations对话框" tabindex="0" loading="lazy"><figcaption>打开Edit Configurations对话框</figcaption></figure><h3 id="二、新增一条node-js-remote-debug" tabindex="-1"><a class="header-anchor" href="#二、新增一条node-js-remote-debug"><span>二、新增一条<code>Node.js Remote Debug</code></span></a></h3><figure><img src="'+i+'" alt="增加 Node.js Remote Debug 配置" tabindex="0" loading="lazy"><figcaption>增加 Node.js Remote Debug 配置</figcaption></figure><figure><img src="'+s+'" alt="gate study 调试器配置" tabindex="0" loading="lazy"><figcaption>gate study 调试器配置</figcaption></figure><p><code>Name</code>栏名字可以随意起，但最好选择明确易懂的。然后选中<code>Single instance only</code>，这样只会启动一个调试器。而不会有很多相同的调试器都连到后面指定的调试端口。</p><p>下面的<code>Host</code>写<b>本地<code>127.0.0.1</code></b>，<code>Debug Port</code>填入刚刚上面指定的端口号，我这里用<code>32312</code>，与前面配置文件中的完全一致。<code>Local directory</code>指定当前的<code>game-server/app.js</code>目录所在目录。[<strong>补充：在webstorm 8 里面 没有 local directory 选项了，不设置页可以调试</strong>]</p><h3 id="附-运行配置" tabindex="-1"><a class="header-anchor" href="#附-运行配置"><span>附：运行配置</span></a></h3><p>当然你可能已经注意到了，这里的<code>Configurations</code>不仅包含调试，还包括运行配置。运行配置方法跟一般的NodeJS程序配置方法相同。NodeJS新人可以参考图片中配置。注意被框的内容。</p><figure><a href="https://f.cloud.github.com/assets/1926860/306139/b7fa3a74-966f-11e2-9a26-666f9f011d4e.png" target="_blank" rel="noopener noreferrer"><img src="'+l+'" alt="game-server 及 web-server 运行配置举例" tabindex="0" loading="lazy"></a><figcaption>game-server 及 web-server 运行配置举例</figcaption></figure><h2 id="准备调试" tabindex="-1"><a class="header-anchor" href="#准备调试"><span>准备调试</span></a></h2><h3 id="一、分别启动web、chat服务器" tabindex="-1"><a class="header-anchor" href="#一、分别启动web、chat服务器"><span>一、分别启动Web、Chat服务器</span></a></h3><p>如果你有做过运行Chat和Web服务器的配置，现在就可以从运行、调试按钮前面的配置下拉菜单中，分别选择<code>Chat</code>以及<code>Web</code>后，点击[►]运行按钮。运行后，可以从IDE下方的控制台输出中查看日志输出，可以检查一下这两个服务器的启动是否成功。如果出现红字，多半表示启动失败。你可以根据提示的报错信息Google或者 <a href="https://github.com/node-pinus/pinus-cn/issues/new" target="_blank" rel="noopener noreferrer">提交Issue</a> ，以查找解决方案。</p><figure><img src="'+p+'" alt="运行、调试配置选择" tabindex="0" loading="lazy"><figcaption>运行、调试配置选择</figcaption></figure><h3 id="二、连接调试器" tabindex="-1"><a class="header-anchor" href="#二、连接调试器"><span>二、连接调试器</span></a></h3><p>再从配置下拉菜单中选择刚刚的调试配置<code>gate study</code>，之后点击[☼]调试按钮。检查窗口下方的<code>Debugger</code>，可以看到有提示说<code>Connected to 127.0.0.1:32312</code>。</p><figure><img src="'+g+'" alt="调试器已连接" tabindex="0" loading="lazy"><figcaption>调试器已连接</figcaption></figure><h3 id="三、设置断点" tabindex="-1"><a class="header-anchor" href="#三、设置断点"><span>三、设置断点</span></a></h3><p>由于我们想调试<code>gate</code>服务器中，与connector分配相关的代码，所以在IDE中，打开<code>app/servers/gate/handler/gateHandler.js</code>。定位到 <a href="https://github.com/node-pinus/chatofpinus/blob/master/game-server/app/servers/gate/handler/gateHandler.js#L30" target="_blank" rel="noopener noreferrer">第30行</a> ，在此处下一个断点。</p><figure><img src="'+h+'" alt="gateHandler.js 中的断点" tabindex="0" loading="lazy"><figcaption>gateHandler.js 中的断点</figcaption></figure><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><p>浏览器中打开 <a href="http://127.0.0.1:3001/index.html" target="_blank" rel="noopener noreferrer">http://127.0.0.1:3001/index.html</a> 会看到 <code>Chat of Pinus</code>标题的登录页面。填入两栏表单后，点击【JOIN】按钮。</p><figure><img src="'+f+'" alt="Chat Of Pinus 登录页" tabindex="0" loading="lazy"><figcaption>Chat Of Pinus 登录页</figcaption></figure><p>此时，页面将不会做出任何反应，是因为服务器端的代码被断点拦下了。而IDE会因为调试器而被激活：</p><figure><img src="'+u+`" alt="开始调试" tabindex="0" loading="lazy"><figcaption>开始调试</figcaption></figure><p>下方窗口中，除了常规调试用到的StepOver、StepInto、StepOut等必须功能外，有很多好用的工具，比如即时表达式求值、切换异常发生时自动中断……这里就不深入探讨了。</p><h2 id="可用的聊天应用" tabindex="-1"><a class="header-anchor" href="#可用的聊天应用"><span>可用的聊天应用</span></a></h2><h3 id="常识" tabindex="-1"><a class="header-anchor" href="#常识"><span>常识</span></a></h3><p>Web服务器启动成功后我们可以看到它提示说可以访问<code>http://127.0.0.1:3001/index.html</code>了。但我们都知道127.0.0.1是本机IP地址，如果真正要跟其他人“聊天”的话，这样是不行的。因为别人不一定能打开127.0.0.1:3001，即便打开了，也无法跟你在一起聊天。</p><p>所以将这里的127.0.0.1换成你自己电脑的可被网络上其他成员访问到的地址，我这里的地址是<code>192.168.1.61</code>。OK，我可以在浏览器里打开<code>http://192.168.1.61:3001/index.html</code>，因为本机调试没有任何问题，所以我也信心满满的将这个地址告诉了与我同一网络的同事。</p><h3 id="发现问题" tabindex="-1"><a class="header-anchor" href="#发现问题"><span>发现问题</span></a></h3><p><b>这时出现了一个问题，我自己可以登录到聊天界面，而其他任何人都无法登录。</b></p><p>根据其他人的浏览器Console输出，可以看到他们都连接一下<code>192.168.1.61:3014</code>端口后，又去连接<code>127.0.0.1:3050</code>，所以他们才无法登录的。</p><p>而<code>3014</code>端口刚好是<code>gate</code>服务器，问题就出在这里，还是继续调试一下吧。</p><p>在经过一番断点切换后，可以发现<code>gateHandler.queryEntry</code>最后跑到了 <a href="https://github.com/node-pinus/chatofpinus/blob/master/game-server/app/servers/gate/handler/gateHandler.js#L39" target="_blank" rel="noopener noreferrer">第39行</a> 的 <code>next</code>函数上。</p><pre><code>var res = dispatcher.dispatch(uid, connectors);
next(null, {
	code: 200,
	host: res.host,
	port: res.clientPort
});
</code></pre><p>可以看到，返回内容的 <code>host</code> 使用了<code>res.host</code>，<code>res</code>又来自<code>connectors</code>，<code>connectors</code>来自配置文件。</p><p>而<code>game-server/config/servers.json</code>下<code>connector</code>服务器的 <a href="https://github.com/node-pinus/chatofpinus/blob/master/game-server/config/servers.json#L4L6" target="_blank" rel="noopener noreferrer">配置条目</a> ，可以清楚的看见<code>&quot;host&quot;:&quot;127.0.0.1&quot;</code>。</p><h3 id="解决问题" tabindex="-1"><a class="header-anchor" href="#解决问题"><span>解决问题</span></a></h3><p>源头找到了，立刻将这里的<code>127.0.0.1</code>全部替换成我本机<code>192.168.1.61</code>。并且重启<code>Chat</code>服务器。</p><p>同时再刷新访问的时候，便可以登录进来了。</p><h2 id="写在后面" tabindex="-1"><a class="header-anchor" href="#写在后面"><span>写在后面</span></a></h2><p>细心的人或许发现，调试器连接的IP地址，是<b>127.0.0.1</b>，但你或许在想，既然是叫&quot;Remote Deubgger&quot;，应该可以连接除<code>127.0.0.1</code>以外的IP吧？<br> 我也是这么想的。但是，在不借助其他工具的情况下，不能办到。</p><p>就是说，不借助一个代理工具，是没办法连接到除了<code>127.0.0.1</code>地址的调试端口的。</p><p>你可以借助NodeJS官方 <a href="https://github.com/joyent/node/wiki/using-eclipse-as-node-applications-debugger" target="_blank" rel="noopener noreferrer">Wiki</a> 文章结尾（Ctrl-F后，搜索&quot;You probably noticed&quot;）的方法及代码，来完成一个代理工具。以便调试部署在远端服务器上运行的代码。</p><p>同时这篇文章也是 Eclipse 的调试指导文章。</p>`,60)]))}const x=o(b,[["render",m]]),w=JSON.parse('{"path":"/Book/NodeJS/Pinus/%E4%BD%BF%E7%94%A8WebStorm%E8%B0%83%E8%AF%95.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"修改配置以启动带有调试模式的服务器","slug":"修改配置以启动带有调试模式的服务器","link":"#修改配置以启动带有调试模式的服务器","children":[{"level":3,"title":"一、打开文件","slug":"一、打开文件","link":"#一、打开文件","children":[]},{"level":3,"title":"二、修改并保存","slug":"二、修改并保存","link":"#二、修改并保存","children":[]}]},{"level":2,"title":"配置IDE的调试器","slug":"配置ide的调试器","link":"#配置ide的调试器","children":[{"level":3,"title":"一、打开Edit Configurations...对话框","slug":"一、打开edit-configurations-对话框","link":"#一、打开edit-configurations-对话框","children":[]},{"level":3,"title":"二、新增一条Node.js Remote Debug","slug":"二、新增一条node-js-remote-debug","link":"#二、新增一条node-js-remote-debug","children":[]},{"level":3,"title":"附：运行配置","slug":"附-运行配置","link":"#附-运行配置","children":[]}]},{"level":2,"title":"准备调试","slug":"准备调试","link":"#准备调试","children":[{"level":3,"title":"一、分别启动Web、Chat服务器","slug":"一、分别启动web、chat服务器","link":"#一、分别启动web、chat服务器","children":[]},{"level":3,"title":"二、连接调试器","slug":"二、连接调试器","link":"#二、连接调试器","children":[]},{"level":3,"title":"三、设置断点","slug":"三、设置断点","link":"#三、设置断点","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[]},{"level":2,"title":"可用的聊天应用","slug":"可用的聊天应用","link":"#可用的聊天应用","children":[{"level":3,"title":"常识","slug":"常识","link":"#常识","children":[]},{"level":3,"title":"发现问题","slug":"发现问题","link":"#发现问题","children":[]},{"level":3,"title":"解决问题","slug":"解决问题","link":"#解决问题","children":[]}]},{"level":2,"title":"写在后面","slug":"写在后面","link":"#写在后面","children":[]}],"git":{"createdTime":1733216180000,"updatedTime":1733216180000,"contributors":[{"name":"lmb0989","email":"1150274785@qq.com","commits":1}]},"readingTime":{"minutes":13.25,"words":1988},"filePathRelative":"Book/NodeJS/Pinus/使用WebStorm调试.md","localizedDate":"2024年12月3日","excerpt":"<p>使用得心应手的IDE来开发应用程序，可以使我们的工作事半功倍。而调试则更可以让我们准确的定位BUG，发现问题。<br><br>\\n本文讲述如何使用 <a href=\\"http://www.jetbrains.com/webstorm/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">WebStorm</a> 这个怪兽级JavaScript IDE来调试 <a href=\\"https://github.com/node-pinus/chatofpinus\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Chat of Pinus</a>。<br><br>\\n如果你更喜欢 <a href=\\"http://www.eclipse.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Eclipse</a> 等其他IDE，希望本文也可以有一些帮助。</p>"}');export{x as comp,w as data};
